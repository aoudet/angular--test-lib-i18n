import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl } from '@angular/forms';
import { debounceTime } from 'rxjs/operators';
import { WeatherEnum } from './enums/weather-enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/button-toggle";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/input";
export class WeatherComponent {
    constructor() {
        this.multiple = false;
        this.weather = {
            temperature: undefined,
            type: [WeatherEnum.none],
        };
        this.changed = new EventEmitter();
        this.weatherEnum = WeatherEnum;
        this.tt = '';
        this.tt = $localize `:@@Resx.WeatherExtension.Celcius:@@Resx.WeatherExtension.Celcius`;
        this.temp = new FormControl(undefined);
    }
    ngOnInit() {
        this.temp.setValue(this.weather.temperature);
        this.temp.valueChanges.pipe(debounceTime(50)).subscribe((data) => {
            this.weather.temperature = data || undefined;
            this.changed.emit(this.weather);
        });
    }
    onWeatherChange(event) {
        console.log('onWeatherChange', event.value);
        this.weather.type = event.value;
        this.changed.emit(this.weather);
    }
}
WeatherComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.2", ngImport: i0, type: WeatherComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
WeatherComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.2", type: WeatherComponent, selector: "lib-weather", inputs: { multiple: "multiple", weather: "weather" }, outputs: { changed: "changed" }, ngImport: i0, template: "<p>weather works!</p>\n<div class=\"row\">\n  <mat-form-field class=\"temperatureLabel\">\n    <mat-label i18n=\"@@Resx.WeatherExtension.Temperature\"\n      >Resx.WeatherExtension.Temperature</mat-label\n    >\n    <input matInput type=\"number\" [formControl]=\"temp\" />\n    <span matSuffix i18n=\"@@Resx.WeatherExtension.Celcius\"\n      >Resx.WeatherExtension.Celcius</span\n    >\n  </mat-form-field>\n\n  <div>\n    <mat-button-toggle-group\n      #group=\"matButtonToggleGroup\"\n      [value]=\"weather.type\"\n      [multiple]=\"multiple\"\n      (change)=\"onWeatherChange($event)\"\n    >\n      <mat-button-toggle [value]=\"weatherEnum.sun\">\n        <img src=\"./assets/extensions/Sun.png\" alt=\"sun\" title=\"sun\" />\n      </mat-button-toggle>\n      <mat-button-toggle [value]=\"weatherEnum.cloud\">\n        <img src=\"./assets/extensions/Cloud.png\" alt=\"cloud\" title=\"cloud\" />\n      </mat-button-toggle>\n      <mat-button-toggle [value]=\"weatherEnum.rain\">\n        <img src=\"./assets/extensions/Rain.png\" alt=\"rain\" title=\"rain\" />\n      </mat-button-toggle>\n      <mat-button-toggle [value]=\"weatherEnum.snow\">\n        <img src=\"./assets/extensions/Snow.png\" alt=\"snow\" title=\"snow\" />\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </div>\n</div>\n\n{{ tt }}\n\n<p>temperature : {{ weather.temperature }}</p>\n<p>type of : {{ weatherEnum[weather.type[0]] }}</p>\n<p>type of : {{ weatherEnum[weather.type[1]] }}</p>\n<p>type of : {{ weatherEnum[weather.type[2]] }}</p>\n<p>type of : {{ weatherEnum[weather.type[3]] }}</p>\n", styles: [".row{display:flex;flex-flow:row nowrap}.temperatureLabel{min-width:10%;text-align:right;max-width:20%;margin-right:5px}img{width:40px;height:40px}\n"], dependencies: [{ kind: "directive", type: i1.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { kind: "component", type: i1.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-label", "aria-labelledby", "id", "name", "value", "tabIndex", "appearance", "checked", "disabled"], outputs: ["change"], exportAs: ["matButtonToggle"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i3.MatLabel, selector: "mat-label" }, { kind: "directive", type: i3.MatSuffix, selector: "[matSuffix]" }, { kind: "directive", type: i4.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.2", ngImport: i0, type: WeatherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-weather', template: "<p>weather works!</p>\n<div class=\"row\">\n  <mat-form-field class=\"temperatureLabel\">\n    <mat-label i18n=\"@@Resx.WeatherExtension.Temperature\"\n      >Resx.WeatherExtension.Temperature</mat-label\n    >\n    <input matInput type=\"number\" [formControl]=\"temp\" />\n    <span matSuffix i18n=\"@@Resx.WeatherExtension.Celcius\"\n      >Resx.WeatherExtension.Celcius</span\n    >\n  </mat-form-field>\n\n  <div>\n    <mat-button-toggle-group\n      #group=\"matButtonToggleGroup\"\n      [value]=\"weather.type\"\n      [multiple]=\"multiple\"\n      (change)=\"onWeatherChange($event)\"\n    >\n      <mat-button-toggle [value]=\"weatherEnum.sun\">\n        <img src=\"./assets/extensions/Sun.png\" alt=\"sun\" title=\"sun\" />\n      </mat-button-toggle>\n      <mat-button-toggle [value]=\"weatherEnum.cloud\">\n        <img src=\"./assets/extensions/Cloud.png\" alt=\"cloud\" title=\"cloud\" />\n      </mat-button-toggle>\n      <mat-button-toggle [value]=\"weatherEnum.rain\">\n        <img src=\"./assets/extensions/Rain.png\" alt=\"rain\" title=\"rain\" />\n      </mat-button-toggle>\n      <mat-button-toggle [value]=\"weatherEnum.snow\">\n        <img src=\"./assets/extensions/Snow.png\" alt=\"snow\" title=\"snow\" />\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </div>\n</div>\n\n{{ tt }}\n\n<p>temperature : {{ weather.temperature }}</p>\n<p>type of : {{ weatherEnum[weather.type[0]] }}</p>\n<p>type of : {{ weatherEnum[weather.type[1]] }}</p>\n<p>type of : {{ weatherEnum[weather.type[2]] }}</p>\n<p>type of : {{ weatherEnum[weather.type[3]] }}</p>\n", styles: [".row{display:flex;flex-flow:row nowrap}.temperatureLabel{min-width:10%;text-align:right;max-width:20%;margin-right:5px}img{width:40px;height:40px}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { multiple: [{
                type: Input
            }], weather: [{
                type: Input
            }], changed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VhdGhlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pMThuLXRlc3Qvc3JjL2xpYi93ZWF0aGVyL3dlYXRoZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaTE4bi10ZXN0L3NyYy9saWIvd2VhdGhlci93ZWF0aGVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7OztBQVluRCxNQUFNLE9BQU8sZ0JBQWdCO0lBWTNCO1FBWFMsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUMxQixZQUFPLEdBQWE7WUFDM0IsV0FBVyxFQUFFLFNBQVM7WUFDdEIsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztTQUN6QixDQUFDO1FBQ1EsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFZLENBQUM7UUFHakQsZ0JBQVcsR0FBRyxXQUFXLENBQUM7UUFDMUIsT0FBRSxHQUFXLEVBQUUsQ0FBQztRQUdkLElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFBLGtFQUFrRSxDQUFDO1FBQ3RGLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxXQUFXLENBQXFCLFNBQVMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDL0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLFNBQVMsQ0FBQztZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQTRCO1FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7OzZHQTdCVSxnQkFBZ0I7aUdBQWhCLGdCQUFnQiwwSUNuQjdCLHlqREEwQ0E7MkZEdkJhLGdCQUFnQjtrQkFMNUIsU0FBUzsrQkFDRSxhQUFhOzBFQUtkLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csT0FBTztzQkFBZixLQUFLO2dCQUlJLE9BQU87c0JBQWhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTWF0QnV0dG9uVG9nZ2xlQ2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYnV0dG9uLXRvZ2dsZSc7XG5cbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgV2VhdGhlckVudW0gfSBmcm9tICcuL2VudW1zL3dlYXRoZXItZW51bSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVdlYXRoZXIge1xuICB0ZW1wZXJhdHVyZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICB0eXBlOiBXZWF0aGVyRW51bVtdO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItd2VhdGhlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi93ZWF0aGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vd2VhdGhlci5jb21wb25lbnQuY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFdlYXRoZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBtdWx0aXBsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSB3ZWF0aGVyOiBJV2VhdGhlciA9IHtcbiAgICB0ZW1wZXJhdHVyZTogdW5kZWZpbmVkLFxuICAgIHR5cGU6IFtXZWF0aGVyRW51bS5ub25lXSxcbiAgfTtcbiAgQE91dHB1dCgpIGNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElXZWF0aGVyPigpO1xuXG4gIHRlbXA6IEZvcm1Db250cm9sO1xuICB3ZWF0aGVyRW51bSA9IFdlYXRoZXJFbnVtO1xuICB0dDogc3RyaW5nID0gJyc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50dCA9ICRsb2NhbGl6ZWA6QEBSZXN4LldlYXRoZXJFeHRlbnNpb24uQ2VsY2l1czpAQFJlc3guV2VhdGhlckV4dGVuc2lvbi5DZWxjaXVzYDtcbiAgICB0aGlzLnRlbXAgPSBuZXcgRm9ybUNvbnRyb2w8bnVtYmVyIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy50ZW1wLnNldFZhbHVlKHRoaXMud2VhdGhlci50ZW1wZXJhdHVyZSk7XG4gICAgdGhpcy50ZW1wLnZhbHVlQ2hhbmdlcy5waXBlKGRlYm91bmNlVGltZSg1MCkpLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgICAgdGhpcy53ZWF0aGVyLnRlbXBlcmF0dXJlID0gZGF0YSB8fCB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmNoYW5nZWQuZW1pdCh0aGlzLndlYXRoZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgb25XZWF0aGVyQ2hhbmdlKGV2ZW50OiBNYXRCdXR0b25Ub2dnbGVDaGFuZ2UpIHtcbiAgICBjb25zb2xlLmxvZygnb25XZWF0aGVyQ2hhbmdlJywgZXZlbnQudmFsdWUpO1xuICAgIHRoaXMud2VhdGhlci50eXBlID0gZXZlbnQudmFsdWU7XG4gICAgdGhpcy5jaGFuZ2VkLmVtaXQodGhpcy53ZWF0aGVyKTtcbiAgfVxufVxuIiwiPHA+d2VhdGhlciB3b3JrcyE8L3A+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxtYXQtZm9ybS1maWVsZCBjbGFzcz1cInRlbXBlcmF0dXJlTGFiZWxcIj5cbiAgICA8bWF0LWxhYmVsIGkxOG49XCJAQFJlc3guV2VhdGhlckV4dGVuc2lvbi5UZW1wZXJhdHVyZVwiXG4gICAgICA+UmVzeC5XZWF0aGVyRXh0ZW5zaW9uLlRlbXBlcmF0dXJlPC9tYXQtbGFiZWxcbiAgICA+XG4gICAgPGlucHV0IG1hdElucHV0IHR5cGU9XCJudW1iZXJcIiBbZm9ybUNvbnRyb2xdPVwidGVtcFwiIC8+XG4gICAgPHNwYW4gbWF0U3VmZml4IGkxOG49XCJAQFJlc3guV2VhdGhlckV4dGVuc2lvbi5DZWxjaXVzXCJcbiAgICAgID5SZXN4LldlYXRoZXJFeHRlbnNpb24uQ2VsY2l1czwvc3BhblxuICAgID5cbiAgPC9tYXQtZm9ybS1maWVsZD5cblxuICA8ZGl2PlxuICAgIDxtYXQtYnV0dG9uLXRvZ2dsZS1ncm91cFxuICAgICAgI2dyb3VwPVwibWF0QnV0dG9uVG9nZ2xlR3JvdXBcIlxuICAgICAgW3ZhbHVlXT1cIndlYXRoZXIudHlwZVwiXG4gICAgICBbbXVsdGlwbGVdPVwibXVsdGlwbGVcIlxuICAgICAgKGNoYW5nZSk9XCJvbldlYXRoZXJDaGFuZ2UoJGV2ZW50KVwiXG4gICAgPlxuICAgICAgPG1hdC1idXR0b24tdG9nZ2xlIFt2YWx1ZV09XCJ3ZWF0aGVyRW51bS5zdW5cIj5cbiAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9leHRlbnNpb25zL1N1bi5wbmdcIiBhbHQ9XCJzdW5cIiB0aXRsZT1cInN1blwiIC8+XG4gICAgICA8L21hdC1idXR0b24tdG9nZ2xlPlxuICAgICAgPG1hdC1idXR0b24tdG9nZ2xlIFt2YWx1ZV09XCJ3ZWF0aGVyRW51bS5jbG91ZFwiPlxuICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL2V4dGVuc2lvbnMvQ2xvdWQucG5nXCIgYWx0PVwiY2xvdWRcIiB0aXRsZT1cImNsb3VkXCIgLz5cbiAgICAgIDwvbWF0LWJ1dHRvbi10b2dnbGU+XG4gICAgICA8bWF0LWJ1dHRvbi10b2dnbGUgW3ZhbHVlXT1cIndlYXRoZXJFbnVtLnJhaW5cIj5cbiAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9leHRlbnNpb25zL1JhaW4ucG5nXCIgYWx0PVwicmFpblwiIHRpdGxlPVwicmFpblwiIC8+XG4gICAgICA8L21hdC1idXR0b24tdG9nZ2xlPlxuICAgICAgPG1hdC1idXR0b24tdG9nZ2xlIFt2YWx1ZV09XCJ3ZWF0aGVyRW51bS5zbm93XCI+XG4gICAgICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvZXh0ZW5zaW9ucy9Tbm93LnBuZ1wiIGFsdD1cInNub3dcIiB0aXRsZT1cInNub3dcIiAvPlxuICAgICAgPC9tYXQtYnV0dG9uLXRvZ2dsZT5cbiAgICA8L21hdC1idXR0b24tdG9nZ2xlLWdyb3VwPlxuICA8L2Rpdj5cbjwvZGl2PlxuXG57eyB0dCB9fVxuXG48cD50ZW1wZXJhdHVyZSA6IHt7IHdlYXRoZXIudGVtcGVyYXR1cmUgfX08L3A+XG48cD50eXBlIG9mIDoge3sgd2VhdGhlckVudW1bd2VhdGhlci50eXBlWzBdXSB9fTwvcD5cbjxwPnR5cGUgb2YgOiB7eyB3ZWF0aGVyRW51bVt3ZWF0aGVyLnR5cGVbMV1dIH19PC9wPlxuPHA+dHlwZSBvZiA6IHt7IHdlYXRoZXJFbnVtW3dlYXRoZXIudHlwZVsyXV0gfX08L3A+XG48cD50eXBlIG9mIDoge3sgd2VhdGhlckVudW1bd2VhdGhlci50eXBlWzNdXSB9fTwvcD5cbiJdfQ==